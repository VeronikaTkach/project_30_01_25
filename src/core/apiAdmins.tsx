import axios, { AxiosError } from 'axios';

const API_BASE_URL = import.meta.env.VITE_API_BASE_URL;

const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
  withCredentials: true, // –∫—É–∫–∏?
});

// –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response) {
      const { status, data } = error.response;
      switch (status) {
        case 400:
          console.error('–û—à–∏–±–∫–∞ 400: –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã', data.message);
          break;
        case 403:
          console.error('–û—à–∏–±–∫–∞ 403: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω', data.message);
          break;
        case 404:
          console.error('–û—à–∏–±–∫–∞ 404: –ù–µ –Ω–∞–π–¥–µ–Ω–æ', data.message);
          break;
        case 500:
          console.error('–û—à–∏–±–∫–∞ 500: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', data.message);
          break;
        default:
          console.error(`–û—à–∏–±–∫–∞ ${status}:`, data.message);
      }
    }
    return Promise.reject(error);
  }
);

export interface IAdmin {
  id: number;
  name: string;
  lastname: string;
  avatar: string;
  referal: string;
  count_users: number;
}

export interface IAvatarResponse {
  src: string;
}

// üìå –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
const handleApiError = (error: unknown, customMessage: string): never => {
  const axiosError = error as AxiosError<{ message?: string }>;
  const errorMessage = axiosError.response?.data?.message || customMessage;
  throw new Error(errorMessage);
};

// –ü–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
export const getAdmins = async (): Promise<IAdmin[]> => {
  try {
    const response = await api.get<IAdmin[]>('/admins');
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:', error);
    throw error;
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
export const getAdminAvatar = async (): Promise<IAvatarResponse> => {
  try {
    const response = await api.get<IAvatarResponse>('/admins/avatar');
    return response.data;
  } catch (error) {
    const axiosError = error as AxiosError;
    if (axiosError.response?.status === 204) {
      return Promise.reject(new Error('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ñ–æ—Ç–æ, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.'));
    }
    if (axiosError.response?.status === 400) {
      return Promise.reject(new Error('–û—à–∏–±–∫–∞ 400: –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞.'));
    }
    return handleApiError(axiosError, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–æ—Ç–ø—Ä–∞–≤–∫–∞ FormData)
export const updateAdminAvatar = async (file: File): Promise<IAvatarResponse> => {
  try {
    const formData = new FormData();
    formData.append('avatar', file);

    const response = await api.patch<IAvatarResponse>('/admins/avatar', formData, {
      headers: { 'Content-Type': 'multipart/form-data' },
    });

    return response.data;
  } catch (error) {
    const axiosError = error as AxiosError;
    const { status } = axiosError.response || {};
    if (status === 400) {
      return Promise.reject(new Error('–û—à–∏–±–∫–∞ 400: –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞.'));
    }
    if (status === 403) {
      return Promise.reject(new Error('–û—à–∏–±–∫–∞ 403: –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.'));
    }
    if (status === 500) {
      return Promise.reject(new Error('–û—à–∏–±–∫–∞ 500: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–µ—Å–∏—Ç –±–æ–ª—å—à–µ 10–ú–ë.'));
    }
    return handleApiError(axiosError, '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
export const deleteAdminAvatar = async (): Promise<string> => {
  try {
    const response = await api.delete<string>('/admins/avatar');
    return response.data;
  } catch (error) {
    const axiosError = error as AxiosError;
    const { status } = axiosError.response || {};
    if (status === 400) {
      return Promise.reject(new Error('–û—à–∏–±–∫–∞ 400: –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞.'));
    }
    if (status === 404) {
      return Promise.reject(new Error('–û—à–∏–±–∫–∞ 404: –ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.'));
    }
    if (status === 500) {
      return Promise.reject(new Error('–û—à–∏–±–∫–∞ 500: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞.'));
    }
    return handleApiError(axiosError, '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
  }
};

export default api;
